const { Photon } = require(process.argv[2])

const photon = new Photon()

process.on('message', async ({ requestId, action, data }) => {
  let response
  switch (action) {
    case 'connect':
      response = await connect(data)
      break

    case 'request':
      response = await request(data)
      break

    case 'disconnect':
      response = await disconnect()
      break
  }

  if (!process.channel) {
    // If the parent's IPC channel is already closed, there's nothing to do
    return
  }

  process.send({ requestId, ...response })
})

const connect = async ({
  credentials = {},
  binaryPath,
  schemaPath,
  photonGenerator,
}) => {
  try {
    if (!schemaPath) {
      // This would only run on Electron
      // TODO:: Introspect and write schema file to a temporary location
      // const datamodel = await photon.introspect(credentials)
      // schemaPath = '/electron/user/data/path'
      // fs.writeFileSync(schemaPath, ...)
    }

    const { dmmf, typings } = await photon.start({
      binaryPath,
      schemaPath,
      ...photonGenerator,
    })
    return {
      error: null,
      data: {
        dmmf,
        typings,
      },
    }
  } catch (e) {
    return { error: { message: e.message, stack: e.stack }, data: null }
  }
}

const request = async ({ query }) => {
  try {
    const { error, response, meta } = await photon.request(query)
    return { error, data: { response, meta, error } }
  } catch (e) {
    return { error: { message: e.message, stack: e.stack }, data: null }
  }
}

const disconnect = async () => {
  try {
    await photon.stop()
    return { error: null }
  } catch (e) {
    return { error: { message: e.message, stack: e.stack }, data: null }
  }
}
