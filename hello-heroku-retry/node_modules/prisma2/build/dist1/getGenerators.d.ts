import { GeneratorConfig } from '@prisma/generator-helper';
import 'flat-map-polyfill';
import { Generator } from './Generator';
export declare type GetGeneratorOptions = {
    schemaPath: string;
    providerAliases?: {
        [alias: string]: string;
    };
    version?: string;
    printDownloadProgress?: boolean;
    baseDir?: string;
    overrideGenerators?: GeneratorConfig[];
    skipDownload?: boolean;
};
/**
 * Makes sure that all generators have the binaries they deserve and returns a
 * `Generator` class per generator defined in the schema.prisma file.
 * In other words, this is basically a generator factory function.
 * @param schemaPath Path to schema.prisma
 * @param aliases Aliases like `photonjs` -> `node_modules/photonjs/gen.js`
 */
export declare function getGenerators({ schemaPath, providerAliases: aliases, version, printDownloadProgress, baseDir, overrideGenerators, skipDownload, }: GetGeneratorOptions): Promise<Generator[]>;
/**
 * Shortcut for getGenerators, if there is only one generator defined. Useful for testing.
 * @param schemaPath path to schema.prisma
 * @param aliases Aliases like `photonjs` -> `node_modules/photonjs/gen.js`
 * @param version Version of the binary, commit hash of https://github.com/prisma/prisma-engine/commits/master
 * @param printDownloadProgress `boolean` to print download progress or not
 */
export declare function getGenerator(options: GetGeneratorOptions): Promise<Generator>;
export declare function skipIndex<T = any>(arr: T[], index: number): T[];
export declare const knownBinaryTargets: string[];
