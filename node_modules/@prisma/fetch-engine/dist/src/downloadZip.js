"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const zlib_1 = __importDefault(require("zlib"));
const p_retry_1 = __importDefault(require("p-retry"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const fs_1 = __importDefault(require("fs"));
async function downloadZip(url, target, progressCb) {
    const partial = target + '.partial';
    const result = await p_retry_1.default(async () => {
        try {
            const resp = await node_fetch_1.default(url, { compress: false });
            if (resp.status !== 200) {
                throw new Error(resp.statusText + ' ' + url);
            }
            const lastModified = resp.headers.get('last-modified');
            const size = parseFloat(resp.headers.get('content-length'));
            const ws = fs_1.default.createWriteStream(partial);
            return await new Promise((resolve, reject) => {
                let bytesRead = 0;
                resp.body.on('error', reject).on('data', chunk => {
                    bytesRead += chunk.length;
                    if (size && progressCb) {
                        progressCb((100 * bytesRead) / size);
                    }
                });
                const gunzip = zlib_1.default.createGunzip();
                gunzip.on('error', reject);
                resp.body.pipe(gunzip).pipe(ws);
                ws.on('error', reject).on('close', () => {
                    resolve(lastModified);
                });
            });
        }
        finally {
            //
        }
    }, {
        retries: 1,
        onFailedAttempt: err => console.error(err),
    });
    fs_1.default.renameSync(partial, target);
    return result;
}
exports.downloadZip = downloadZip;
//# sourceMappingURL=downloadZip.js.map