"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const make_dir_1 = __importDefault(require("make-dir"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const find_cache_dir_1 = __importDefault(require("find-cache-dir"));
const fs_1 = __importDefault(require("fs"));
const util_1 = require("util");
const path_1 = __importDefault(require("path"));
const exists = util_1.promisify(fs_1.default.exists);
const readFile = util_1.promisify(fs_1.default.readFile);
async function getLocalLastModified(filePath) {
    const fileExists = await exists(filePath);
    if (!fileExists) {
        return null;
    }
    const file = await readFile(filePath, 'utf-8');
    if (!file || file.length === 0) {
        return null;
    }
    return new Date(file);
}
exports.getLocalLastModified = getLocalLastModified;
async function getRemoteLastModified(url) {
    const response = await node_fetch_1.default(url, {
        method: 'HEAD',
    });
    return new Date(response.headers.get('last-modified'));
}
exports.getRemoteLastModified = getRemoteLastModified;
async function getRootCacheDir(platform) {
    if (platform === 'darwin' || platform.startsWith('linux')) {
        return path_1.default.join(os_1.default.homedir(), '.cache/prisma');
    }
    return find_cache_dir_1.default({ name: 'prisma' });
}
exports.getRootCacheDir = getRootCacheDir;
async function getCacheDir(channel, version, platform) {
    const rootCacheDir = await getRootCacheDir(platform);
    const cacheDir = path_1.default.join(rootCacheDir, channel, version, platform);
    await make_dir_1.default(cacheDir);
    return cacheDir;
}
exports.getCacheDir = getCacheDir;
function rewriteKind(kind) {
    if (kind === 'query-engine') {
        return 'prisma';
    }
    return kind;
}
function getDownloadUrl(channel, version, platform, binaryName) {
    return `https://s3-eu-west-1.amazonaws.com/prisma-native/${channel}/${version}/${platform}/${rewriteKind(binaryName)}.gz`;
}
exports.getDownloadUrl = getDownloadUrl;
//# sourceMappingURL=util.js.map