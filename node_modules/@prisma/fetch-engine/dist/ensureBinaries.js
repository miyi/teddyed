"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const download_1 = require("./download");
const util_1 = require("util");
const make_dir_1 = __importDefault(require("make-dir"));
const exists = util_1.promisify(fs_1.default.exists);
async function ensureQueryEngineBinary(resultPath, version) {
    const runtimeDir = resultPath || (await getRuntimeDir());
    await make_dir_1.default(runtimeDir);
    const prisma = path_1.default.join(runtimeDir, 'prisma');
    await download_1.download(prisma, version);
}
exports.ensureQueryEngineBinary = ensureQueryEngineBinary;
async function ensureMigrationBinary(resultPath, version) {
    await make_dir_1.default(resultPath);
    const prisma = path_1.default.join(resultPath, 'migration-engine');
    await download_1.downloadMigrationBinary(prisma, version);
}
exports.ensureMigrationBinary = ensureMigrationBinary;
async function getRuntimeDir() {
    let runtimeDir = path_1.default.join(__dirname, '../runtime');
    if (await exists(runtimeDir)) {
        return runtimeDir;
    }
    runtimeDir = path_1.default.join(__dirname, '../../runtime');
    if (await exists(runtimeDir)) {
        return runtimeDir;
    }
    // node_modules/fetch-engine/run.js
    runtimeDir = path_1.default.join(__dirname, '../../../runtime');
    if (await exists(runtimeDir)) {
        return runtimeDir;
    }
    throw new Error(`Cannot download binaries as path ${runtimeDir} does not exist`);
}
//# sourceMappingURL=ensureBinaries.js.map