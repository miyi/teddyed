"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
class PhotonError extends Error {
    constructor(log) {
        const isPanic = log.message === 'PANIC';
        const message = isPanic ? serializePanic(log) : serializeError(log);
        super(message);
        Object.defineProperty(this, 'log', {
            enumerable: false,
            value: log,
        });
        Object.defineProperty(this, 'isPanic', {
            enumerable: false,
            value: isPanic,
        });
    }
}
exports.PhotonError = PhotonError;
function serializeError(log) {
    let { application, level, message } = log, rest = __rest(log, ["application", "level", "message"]);
    if (application === 'datamodel') {
        return chalk_1.default.red.bold('Schema ') + message;
    }
    if (application === 'exit') {
        return chalk_1.default.red.bold('Engine exited ') + message;
    }
    return chalk_1.default.red(log.message + ' ' + serializeObject(rest));
}
function serializePanic(log) {
    return `${chalk_1.default.red.bold('Reason: ')}${chalk_1.default.red(`${log.reason} in ${chalk_1.default.underline(`${log.file}:${log.line}:${log.column}`)}`)}

Please create an issue in the ${chalk_1.default.bold('photonjs')} repo with
your \`schema.prisma\` and the Photon method you tried to use 🙏:
${chalk_1.default.underline('https://github.com/prisma/photonjs/issues/new')}\n`;
}
class PhotonQueryError extends Error {
    constructor(message) {
        super(chalk_1.default.red.bold('Reason: ') + chalk_1.default.red(message + '\n'));
    }
}
exports.PhotonQueryError = PhotonQueryError;
function serializeObject(obj) {
    return Object.entries(obj)
        .map(([key, value]) => `${key}=${JSON.parse(JSON.stringify(value))}`)
        .join(' ');
}
/**
 * Engine Base Class used by Browser and Node.js
 */
class Engine {
}
exports.Engine = Engine;
//# sourceMappingURL=Engine.js.map