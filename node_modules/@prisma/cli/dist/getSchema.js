"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const exists = util_1.promisify(fs_1.default.exists);
const readFile = util_1.promisify(fs_1.default.readFile);
/**
 * Async
 */
function getSchemaPath() {
    return __awaiter(this, void 0, void 0, function* () {
        let schemaPath = path_1.default.join(process.cwd(), 'schema.prisma');
        if (yield exists(schemaPath)) {
            return schemaPath;
        }
        schemaPath = path_1.default.join(process.cwd(), `prisma/schema.prisma`);
        if (yield exists(schemaPath)) {
            return schemaPath;
        }
        return null;
    });
}
exports.getSchemaPath = getSchemaPath;
/**
 * Small helper that returns the directory which contains the `schema.prisma` file
 */
function getSchemaDir() {
    return __awaiter(this, void 0, void 0, function* () {
        const schemaPath = yield getSchemaPath();
        if (schemaPath) {
            return path_1.default.dirname(schemaPath);
        }
        return null;
    });
}
exports.getSchemaDir = getSchemaDir;
function getSchema() {
    return __awaiter(this, void 0, void 0, function* () {
        const schemaPath = yield getSchemaPath();
        if (!schemaPath) {
            throw new Error(`Could not find schema.prisma`);
        }
        return readFile(schemaPath, 'utf-8');
    });
}
exports.getSchema = getSchema;
/**
 * Sync
 */
function getSchemaPathSync() {
    let schemaPath = path_1.default.join(process.cwd(), 'schema.prisma');
    if (fs_1.default.existsSync(schemaPath)) {
        return schemaPath;
    }
    schemaPath = path_1.default.join(process.cwd(), `prisma/schema.prisma`);
    if (fs_1.default.existsSync(schemaPath)) {
        return schemaPath;
    }
    return null;
}
exports.getSchemaPathSync = getSchemaPathSync;
/**
 * Sync version of the small helper that returns the directory which contains the `schema.prisma` file
 */
function getSchemaDirSync() {
    const schemaPath = getSchemaPathSync();
    if (schemaPath) {
        return path_1.default.dirname(schemaPath);
    }
    return null;
}
exports.getSchemaDirSync = getSchemaDirSync;
function getSchemaSync() {
    const schemaPath = getSchemaPathSync();
    if (!schemaPath) {
        throw new Error(`Could not find ${schemaPath || 'schema.prisma'}`);
    }
    return fs_1.default.readFileSync(schemaPath, 'utf-8');
}
exports.getSchemaSync = getSchemaSync;
//# sourceMappingURL=getSchema.js.map