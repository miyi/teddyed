"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const fs_1 = __importDefault(require("fs"));
const util_1 = require("util");
const child_process_1 = require("child_process");
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default('getos');
const readFile = util_1.promisify(fs_1.default.readFile);
const exists = util_1.promisify(fs_1.default.exists);
async function getos() {
    const platform = os_1.default.platform();
    if (platform !== 'linux') {
        return {
            platform,
        };
    }
    return {
        platform: 'linux',
        libssl: await getLibSslVersion(),
        distro: await resolveUbuntu(),
    };
}
exports.getos = getos;
async function resolveUbuntu() {
    if (await exists('/etc/lsb-release')) {
        const idRegex = /distrib_id=(.*)/i;
        const releaseRegex = /distrib_release=(.*)/i;
        const codenameRegex = /distrib_codename=(.*)/i;
        const file = await readFile('/etc/lsb-release', 'utf-8');
        const idMatch = file.match(idRegex);
        const id = (idMatch && idMatch[1]) || null;
        const codenameMatch = file.match(codenameRegex);
        const codename = (codenameMatch && codenameMatch[1]) || null;
        const releaseMatch = file.match(releaseRegex);
        const release = (releaseMatch && releaseMatch[1]) || null;
        if (id && codename && release && id.toLowerCase() === 'ubuntu') {
            return { dist: id, release, codename };
        }
    }
    return null;
}
exports.resolveUbuntu = resolveUbuntu;
async function getLibSslVersion() {
    const [version, ls] = await Promise.all([
        gracefulExec(`openssl version -v`),
        gracefulExec(`ls -l /lib64 | grep ssl;
    ls -l /usr/lib64 | grep ssl`),
    ]);
    debug({ version });
    debug({ ls });
    if (version) {
        const match = /^OpenSSL\s(\d+\.\d+\.\d+)/.exec(version);
        if (match) {
            return match[1];
        }
    }
    if (ls) {
        const match = /libssl\.so\.(\d+\.\d+\.\d+)/.exec(ls);
        if (match) {
            return match[1];
        }
    }
    return undefined;
}
exports.getLibSslVersion = getLibSslVersion;
async function gracefulExec(cmd) {
    return new Promise(resolve => {
        try {
            child_process_1.exec(cmd, (err, stdout, stderr) => {
                resolve(String(stdout));
            });
        }
        catch (e) {
            resolve(undefined);
            return undefined;
        }
    });
}
async function getPlatform() {
    const { platform, libssl, distro } = await getos();
    debug({ platform, libssl });
    if (platform === 'darwin') {
        return 'darwin';
    }
    if (platform === 'win32') {
        return 'windows';
    }
    if (platform === 'linux' && libssl) {
        if (libssl === '1.0.2') {
            if (distro && distro.codename === 'xenial') {
                return 'linux-glibc-libssl1.0.2-ubuntu1604';
            }
            return 'linux-glibc-libssl1.0.2';
        }
        if (libssl === '1.0.1') {
            return 'linux-glibc-libssl1.0.1';
        }
    }
    return 'linux-glibc-libssl1.1.0';
}
exports.getPlatform = getPlatform;
//# sourceMappingURL=getPlatform.js.map