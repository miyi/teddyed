import { GraphQLSchema } from "graphql";
import { TypegenInfo, InternalBuilderConfig, NexusSchemaExtensions, NexusSchema } from "./builder";
/**
 * Passed into the SchemaBuilder, this keeps track of any necessary
 * field / type metadata we need to be aware of when building the
 * generated types and/or SDL artifact, including but not limited to:
 */
export declare class TypegenMetadata {
    protected config: InternalBuilderConfig;
    constructor(config: InternalBuilderConfig);
    /**
     * Generates the artifacts of the buid based on what we
     * know about the schema and how it was defined.
     */
    generateArtifacts(schema: NexusSchema): Promise<void>;
    sortSchema(schema: GraphQLSchema): GraphQLSchema;
    writeFile(type: "schema" | "types", output: string, filePath: string): Promise<void>;
    /**
     * Generates the schema, adding any directives as necessary
     */
    generateSchemaFile(schema: GraphQLSchema): string;
    /**
     * Generates the type definitions
     */
    generateTypesFile(schema: GraphQLSchema, extensions: NexusSchemaExtensions, typegenFile: string): Promise<string>;
    getTypegenInfo(schema: GraphQLSchema): Promise<TypegenInfo>;
}
