"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var scalar_1 = require("../datamodel/scalar");
var util_1 = require("./util");
function getKind(field, enumMap) {
    if (typeof field.type === 'string' && scalar_1.isTypeIdentifier(field.type)) {
        return 'scalar';
    }
    if (typeof field.type === 'string') {
        if (enumMap[field.type]) {
            return 'enum';
        }
    }
    else {
        if (enumMap[field.type.name]) {
            return 'enum';
        }
    }
    return 'object';
}
function mapIdType(type) {
    var map = {
        ID: 'String',
        UUID: 'String',
    };
    return map[type] || type;
}
function getType(field) {
    if (typeof field.type === 'string') {
        return field.type;
    }
    return field.type.name;
}
function isdlToDmmfDatamodel(isdl, dataSources) {
    if (dataSources === void 0) { dataSources = []; }
    var enums = isdl.types
        .filter(function (t) { return t.isEnum; })
        .map(function (type) {
        return {
            name: type.name,
            values: type.fields.map(function (f) { return f.name; }),
        };
    });
    var enumMap = util_1.keyBy(enums, function (e) { return e.name; });
    var models = isdl.types
        .filter(function (t) { return !t.isEnum; })
        .map(function (type) {
        return {
            name: type.name,
            isEmbedded: type.isEmbedded,
            dbName: type.databaseName,
            fields: type.fields
                .filter(function (f) { return f.type !== 'Json'; })
                .map(function (field) {
                var kind = getKind(field, enumMap);
                var defaultValue;
                if (field.type === 'ID') {
                    defaultValue = {
                        name: 'cuid',
                        returnType: 'String',
                        args: [],
                    };
                }
                if (field.type === 'UUID') {
                    defaultValue = {
                        name: 'uuid',
                        returnType: 'String',
                        args: [],
                    };
                }
                if (field.isCreatedAt) {
                    defaultValue = {
                        name: 'now',
                        returnType: 'DateTime',
                        args: [],
                    };
                }
                return {
                    name: field.name,
                    kind: kind,
                    dbName: field.databaseName,
                    isGenerated: false,
                    isId: field.isId,
                    isList: field.isList,
                    isRequired: field.isRequired,
                    isUnique: field.isUnique,
                    relationName: field.relationName,
                    type: mapIdType(getType(field)),
                    default: defaultValue,
                    isUpdatedAt: field.isUpdatedAt,
                };
            }),
        };
    });
    return { dmmf: { models: models, enums: enums }, dataSources: dataSources };
}
exports.isdlToDmmfDatamodel = isdlToDmmfDatamodel;
//# sourceMappingURL=isdlToDmmf.js.map