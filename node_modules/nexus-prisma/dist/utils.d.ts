/**
 * Write file contents but first delete the file off disk if present. This is a
 * useful function when the effect of file delete is needed to trigger some file
 * watch/refresh mechanism, such as is the case with VSCode TS declaration files
 * inside `@types/` packages.
 *
 * For more details that motivated this utility refer to the originating issue
 * https://github.com/prisma-labs/nexus-prisma/issues/453.
 */
export declare const hardWriteFile: (filePath: string, data: string) => Promise<void>;
/**
 * Write file contents but first delete the file off disk if present. This is a
 * useful function when the effect of file delete is needed to trigger some file
 * watch/refresh mechanism, such as is the case with VSCode TS declaration files
 * inside `@types/` packages.
 *
 * For more details that motivated this utility refer to the originating issue
 * https://github.com/prisma-labs/nexus-prisma/issues/453.
 */
export declare const hardWriteFileSync: (filePath: string, data: string) => void;
/**
 * TODO
 */
export declare const indexBy: <X extends Record<string, any>>(indexer: ((x: X) => string) | keyof X, xs: X[]) => Record<string, X>;
export declare function partition<T>(arr: T[], iteratee: (val: T) => boolean): [T[], T[]];
export declare const upperFirst: (s: string) => string;
export declare function flatMap<T, U>(array: T[], callbackfn: (value: T, index: number, array: T[]) => U[]): U[];
export declare function dmmfFieldToNexusFieldConfig(param: {
    type: string | object;
    isList: boolean;
    isRequired: boolean;
}): {
    type: any;
    list: true | undefined;
    nullable: boolean;
};
export declare function assertPhotonInContext(photon: any): void;
export declare function trimIfInNodeModules(path: string): string;
export declare function getImportPathRelativeToOutput(from: string, to: string): string;
/**
 * Unwrap nexus user-defined types and convert them to a map<TypeName, boolean>
 */
export declare function unwrapTypes(types: any): Record<string, boolean>;
/**
 * Index types are just an alias for Records
 * whose keys are of type `string`. The name
 * of this type, `Index`, signifies its canonical
 * use-case for data indexed by some property, e.g.
 * a list of users indexed by email.
 */
export declare type Index<T> = Record<string, T>;
//# sourceMappingURL=utils.d.ts.map