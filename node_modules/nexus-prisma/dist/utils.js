"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const nexus_1 = require("nexus");
const path_1 = require("path");
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
/**
 * Write file contents but first delete the file off disk if present. This is a
 * useful function when the effect of file delete is needed to trigger some file
 * watch/refresh mechanism, such as is the case with VSCode TS declaration files
 * inside `@types/` packages.
 *
 * For more details that motivated this utility refer to the originating issue
 * https://github.com/prisma-labs/nexus-prisma/issues/453.
 */
exports.hardWriteFile = (filePath, data) => fs
    .unlink(filePath)
    .catch(error => {
    return error.code === 'ENOENT' ? Promise.resolve() : Promise.reject(error);
})
    .then(() => fs.mkdirp(path.dirname(filePath)))
    .then(() => fs.writeFile(filePath, data));
/**
 * Write file contents but first delete the file off disk if present. This is a
 * useful function when the effect of file delete is needed to trigger some file
 * watch/refresh mechanism, such as is the case with VSCode TS declaration files
 * inside `@types/` packages.
 *
 * For more details that motivated this utility refer to the originating issue
 * https://github.com/prisma-labs/nexus-prisma/issues/453.
 */
exports.hardWriteFileSync = (filePath, data) => {
    fs.mkdirpSync(path.dirname(filePath));
    try {
        fs.unlinkSync(filePath);
    }
    catch (error) {
        if (error.code !== 'ENOENT')
            throw error;
    }
    fs.writeFileSync(filePath, data);
};
// TODO `any` should be `unknown` but there is a bug (?)
// preventing that from working, see:
// https://github.com/microsoft/TypeScript/issues/33521
// https://stackoverflow.com/questions/58030413/calculate-union-type-of-key-names-in-object-whose-values-are-indexable
/**
 * TODO
 */
exports.indexBy = (indexer, xs) => {
    const seed = {};
    if (typeof indexer === 'function') {
        return xs.reduce((index, x) => {
            const address = indexer(x);
            index[address] = x;
            return index;
        }, seed);
    }
    else {
        return xs.reduce((index, x) => {
            const address = x[indexer];
            index[address] = x;
            return index;
        }, seed);
    }
};
function partition(arr, iteratee) {
    const partitioned = [[], []];
    for (const val of arr) {
        const partitionIndex = iteratee(val) ? 0 : 1;
        partitioned[partitionIndex].push(val);
    }
    return partitioned;
}
exports.partition = partition;
exports.upperFirst = (s) => {
    return s.replace(/^\w/, c => c.toUpperCase());
};
function flatMap(array, callbackfn) {
    return Array.prototype.concat(...array.map(callbackfn));
}
exports.flatMap = flatMap;
function dmmfFieldToNexusFieldConfig(param) {
    return {
        type: param.type,
        list: param.isList ? true : undefined,
        nullable: !param.isRequired,
    };
}
exports.dmmfFieldToNexusFieldConfig = dmmfFieldToNexusFieldConfig;
function assertPhotonInContext(photon) {
    if (!photon) {
        throw new Error('Could not find photon in context');
    }
}
exports.assertPhotonInContext = assertPhotonInContext;
function trimIfInNodeModules(path) {
    if (path.includes('node_modules')) {
        return path.substring(path.lastIndexOf('node_modules') + 'node_modules'.length + 1);
    }
    return path;
}
exports.trimIfInNodeModules = trimIfInNodeModules;
function getImportPathRelativeToOutput(from, to) {
    if (to.includes('node_modules')) {
        return trimIfInNodeModules(to);
    }
    let relativePath = path_1.relative(from, to);
    if (!relativePath.startsWith('.')) {
        relativePath = './' + relativePath;
    }
    // remove .ts or .js file extension
    relativePath = relativePath.replace(/\.(ts|js)$/, '');
    // remove /index
    relativePath = relativePath.replace(/\/index$/, '');
    // replace \ with /
    relativePath = relativePath.replace(/\\/g, '/');
    return relativePath;
}
exports.getImportPathRelativeToOutput = getImportPathRelativeToOutput;
/**
 * Unwrap nexus user-defined types and convert them to a map<TypeName, boolean>
 */
function unwrapTypes(types) {
    let output = {};
    if (!types) {
        return {};
    }
    if (nexus_1.core.isNexusNamedTypeDef(types) || graphql_1.isNamedType(types)) {
        output[types.name] = true;
    }
    else if (Array.isArray(types)) {
        types.forEach(typeDef => {
            output = Object.assign(Object.assign({}, output), unwrapTypes(typeDef));
        });
    }
    else if (nexus_1.core.isObject(types)) {
        Object.keys(types).forEach(key => {
            output = Object.assign(Object.assign({}, output), unwrapTypes(types[key]));
        });
    }
    return output;
}
exports.unwrapTypes = unwrapTypes;
//# sourceMappingURL=utils.js.map