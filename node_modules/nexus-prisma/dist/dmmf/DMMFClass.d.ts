import { ExternalDMMF as DMMF } from './transformer';
import { Index } from '../utils';
export declare class DMMFClass implements DMMF.Document {
    datamodel: DMMF.Datamodel;
    schema: DMMF.Schema;
    mappings: DMMF.Mapping[];
    queryObject: OutputType;
    mutationObject: OutputType;
    outputTypesIndex: Index<DMMF.OutputType>;
    inputTypesIndex: Index<DMMF.InputType>;
    mappingsIndex: Index<DMMF.Mapping>;
    enumsIndex: Index<DMMF.Enum>;
    modelsIndex: Index<DMMF.Model>;
    constructor({ datamodel, schema, mappings }: DMMF.Document);
    getInputType(inputTypeName: string): DMMF.InputType;
    getOutputType(outputTypeName: string): OutputType;
    hasOutputType(outputTypeName: string): boolean;
    getEnumType(enumTypeName: string): DMMF.Enum;
    hasEnumType(enumTypeName: string): boolean;
    getModelOrThrow(modelName: string): DMMF.Model;
    hasModel(modelName: string): boolean;
    getMapping(modelName: string): DMMF.Mapping;
}
export declare class OutputType {
    protected outputType: DMMF.OutputType;
    name: string;
    fields: DMMF.SchemaField[];
    isEmbedded?: boolean;
    constructor(outputType: DMMF.OutputType);
    getField(fieldName: string): DMMF.SchemaField;
}
//# sourceMappingURL=DMMFClass.d.ts.map