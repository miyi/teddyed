"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
class DMMFClass {
    constructor({ datamodel, schema, mappings }) {
        this.outputTypesIndex = {};
        // DMMF
        this.datamodel = datamodel;
        this.schema = schema;
        this.mappings = mappings;
        // Indices
        this.modelsIndex = utils_1.indexBy('name', datamodel.models);
        this.enumsIndex = utils_1.indexBy('name', schema.enums);
        this.inputTypesIndex = utils_1.indexBy('name', schema.inputTypes);
        this.outputTypesIndex = utils_1.indexBy('name', schema.outputTypes);
        this.mappingsIndex = utils_1.indexBy('model', mappings);
        // Entrypoints
        this.queryObject = this.getOutputType('Query');
        this.mutationObject = this.getOutputType('Mutation');
    }
    getInputType(inputTypeName) {
        const inputType = this.inputTypesIndex[inputTypeName];
        if (!inputType) {
            throw new Error('Could not find input type name: ' + inputTypeName);
        }
        return inputType;
    }
    getOutputType(outputTypeName) {
        const outputType = this.outputTypesIndex[outputTypeName];
        if (!outputType) {
            throw new Error('Could not find output type name: ' + outputTypeName);
        }
        return new OutputType(outputType);
    }
    hasOutputType(outputTypeName) {
        const outputType = this.outputTypesIndex[outputTypeName];
        if (!outputType) {
            return false;
        }
        return true;
    }
    getEnumType(enumTypeName) {
        const enumType = this.enumsIndex[enumTypeName];
        if (!enumType) {
            throw new Error('Could not find enum type name: ' + enumTypeName);
        }
        return enumType;
    }
    hasEnumType(enumTypeName) {
        const enumType = this.enumsIndex[enumTypeName];
        if (!enumType) {
            return false;
        }
        return true;
    }
    getModelOrThrow(modelName) {
        const model = this.modelsIndex[modelName];
        if (!model) {
            throw new Error('Could not find model for model: ' + modelName);
        }
        return model;
    }
    hasModel(modelName) {
        const model = this.modelsIndex[modelName];
        if (!model) {
            return false;
        }
        return true;
    }
    getMapping(modelName) {
        const mapping = this.mappingsIndex[modelName];
        if (!mapping) {
            throw new Error('Could not find mapping for model: ' + modelName);
        }
        return mapping;
    }
}
exports.DMMFClass = DMMFClass;
class OutputType {
    constructor(outputType) {
        this.outputType = outputType;
        this.name = outputType.name;
        this.fields = outputType.fields;
        this.isEmbedded = outputType.isEmbedded;
    }
    getField(fieldName) {
        const field = this.outputType.fields.find(f => f.name === fieldName);
        if (!field) {
            throw new Error(`Could not find field field '${fieldName}' on type ${this.outputType.name}`);
        }
        return field;
    }
}
exports.OutputType = OutputType;
//# sourceMappingURL=DMMFClass.js.map