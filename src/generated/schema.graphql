### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


scalar DateTime

input EventCreateManyWithoutEventStoreInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutInstructorsInput!]
}

input EventCreateOneWithoutEventInput {
  connect: EventWhereUniqueInput
  create: EventCreateWithoutStudentsInput
}

input EventCreateWithoutInstructorsInput {
  createdAt: DateTime
  from: DateTime!
  id: ID
  listing: ListingCreateOneWithoutListingInput!
  provider: ProviderCreateOneWithoutProviderInput!
  students: StudentCreateManyWithoutStudentsInput
  to: DateTime!
  updatedAt: DateTime
}

input EventCreateWithoutStudentsInput {
  createdAt: DateTime
  from: DateTime!
  id: ID
  instructors: InstructorCreateManyWithoutInstructorsInput
  listing: ListingCreateOneWithoutListingInput!
  provider: ProviderCreateOneWithoutProviderInput!
  to: DateTime!
  updatedAt: DateTime
}

input EventWhereUniqueInput {
  id: ID
}

enum Gender {
  FEMALE
  MALE
}

input InstructorCreateManyWithoutInstructorsInput {
  connect: [InstructorWhereUniqueInput!]
  create: [InstructorCreateWithoutProviderInput!]
}

input InstructorCreateWithoutProviderInput {
  age: Int!
  createdAt: DateTime
  eventStore: EventCreateManyWithoutEventStoreInput
  firstName: String!
  gender: Gender!
  id: ID
  lastName: String!
  listing: ListingCreateOneWithoutListingInput
  updatedAt: DateTime
}

input InstructorWhereUniqueInput {
  id: ID
}

type Listing {
  content: String
  createdAt: DateTime!
  id: ID!
  owner: Provider!
  title: String!
  updatedAt: DateTime!
}

input ListingCreateManyWithoutListingsInput {
  connect: [ListingWhereUniqueInput!]
  create: [ListingCreateWithoutOwnerInput!]
}

input ListingCreateOneWithoutListingInput {
  connect: ListingWhereUniqueInput
  create: ListingCreateWithoutEventStoreInput
}

input ListingCreateWithoutEventStoreInput {
  content: String
  createdAt: DateTime
  id: ID
  instructors: InstructorCreateManyWithoutInstructorsInput
  owner: ProviderCreateOneWithoutOwnerInput!
  title: String!
  updatedAt: DateTime
}

input ListingCreateWithoutOwnerInput {
  content: String
  createdAt: DateTime
  EventStore: EventCreateManyWithoutEventStoreInput
  id: ID
  instructors: InstructorCreateManyWithoutInstructorsInput
  title: String!
  updatedAt: DateTime
}

input ListingWhereUniqueInput {
  id: ID
}

type Mutation {
  createDraft(authorEmail: String, content: String, title: String!): Post!
  createListing(ownerEmail: String!, title: String!): Listing!
  publish(id: ID): Post
  signupProvider(data: ProviderCreateInput!): Provider!
  signupUser(data: UserCreateInput!): User!
}

type Post {
  author: User!
  content: String
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostWhereUniqueInput {
  id: ID
}

type Provider {
  email: String!
  id: ID!
  listings(after: ID, before: ID, first: Int, last: Int, skip: Int): [Listing!]!
  name: String
}

input ProviderCreateInput {
  email: String!
  eventStore: EventCreateManyWithoutEventStoreInput
  id: ID
  instructors: InstructorCreateManyWithoutInstructorsInput
  listings: ListingCreateManyWithoutListingsInput
  name: String
}

input ProviderCreateOneWithoutOwnerInput {
  connect: ProviderWhereUniqueInput
  create: ProviderCreateWithoutListingsInput
}

input ProviderCreateOneWithoutProviderInput {
  connect: ProviderWhereUniqueInput
  create: ProviderCreateWithoutEventStoreInput
}

input ProviderCreateWithoutEventStoreInput {
  email: String!
  id: ID
  instructors: InstructorCreateManyWithoutInstructorsInput
  listings: ListingCreateManyWithoutListingsInput
  name: String
}

input ProviderCreateWithoutListingsInput {
  email: String!
  eventStore: EventCreateManyWithoutEventStoreInput
  id: ID
  instructors: InstructorCreateManyWithoutInstructorsInput
  name: String
}

input ProviderWhereUniqueInput {
  email: String
  id: ID
}

type Query {
  browse: [Listing!]!
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  listing(where: ListingWhereUniqueInput!): Listing
  post(where: PostWhereUniqueInput!): Post
  search(searchString: String): [Listing!]!
}

input StudentCreateManyWithoutStudentInput {
  connect: [StudentWhereUniqueInput!]
  create: [StudentCreateWithoutUserInput!]
}

input StudentCreateManyWithoutStudentsInput {
  connect: [StudentWhereUniqueInput!]
  create: [StudentCreateWithoutEventInput!]
}

input StudentCreateWithoutEventInput {
  age: Int
  firstName: String
  gender: Gender
  id: ID
  LastName: String
  user: UserCreateOneWithoutUserInput!
}

input StudentCreateWithoutUserInput {
  age: Int
  event: EventCreateOneWithoutEventInput
  firstName: String
  gender: Gender
  id: ID
  LastName: String
}

input StudentWhereUniqueInput {
  id: ID
}

type User {
  email: String!
  id: ID!
  name: String
  posts: [Post!]!
}

input UserCreateInput {
  email: String!
  id: ID
  name: String
  posts: PostCreateManyWithoutPostsInput
  student: StudentCreateManyWithoutStudentInput
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutStudentInput
}

input UserCreateWithoutStudentInput {
  email: String!
  id: ID
  name: String
  posts: PostCreateManyWithoutPostsInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
